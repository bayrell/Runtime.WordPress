<!--
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
-->

<class name="Runtime.WordPress.Components.CKEditor">

<use name="Runtime.Core.Message" />
<use name="Runtime.Web.Crud.Helper" />
<use name="Runtime.Web.Events.ChangeEvent" />
<use name="Runtime.Web.RenderProvider" />


<style>
.textarea{
	width: 100%;
	max-width: 100%;
	min-height: 400px;
	padding: 6px 12px;
	background-color: var(--widget-color-default);
	border: var(--widget-border-width) var(--widget-color-border) solid;
	outline: transparent;
}
</style>


<template>

	%set string value = Helper::getValue(layout, model_path, render_params);
	%set string name = (render_params != null) ? render_params.get("name", "") : "";
	%set string type = (render_params != null) ? render_params.get("type", "input") : "";
	%set primitive tag = (render_params != null) ? render_params.get("@tag", "") : "";
	<textarea class='textarea' @tag={ tag } @event:ChangeEvent="onChange" @ref="textarea"
		name={ name } type={ type } value={ value } />
	
</template>


<script>

var textarea;
var instance;
var change_timer;


/**
 * If component needs render
 */
bool isRender()
{
	if (this.vdom.is_new_element) return true;
	return false;
}


/**
 * On change
 */
public void onChange(Message<ChangeEvent> msg)
{
	if (this.model_path != "")
	{
		this.provider.commitComponent( this, msg.event.value );
	}
	
	ChangeEvent event = msg.event.clone({ "field_name": this.params["name"] });
	this.sendEvent(event);
}


/**
 * onRepaint
 */
public void onRepaint()
{
	if (this.vdom.is_new_element)
	{
		#ifcode JAVASCRIPT then
		var conf = JSON.parse(JSON.stringify( ckeditorSettings.configuration ));
		conf["customConfig"] = "/wp-content/plugins/ckeditor-for-wordpress/ckeditor.config.small.js";
		this.instance = CKEDITOR.replace(this.textarea.elem, conf);
		
		this.instance.on('change', ()=>{ 
			if (this.change_timer == null)
			{
				this.change_timer = setTimeout(this.onCodeChanged.bind(this), 100);
			}
		});
		
		#endif
	}
}


/**
 * On code changed
 */
public void onCodeChanged()
{
	this.change_timer = null;
	string content = this.instance.getData();
	if (this.model_path != "")
	{
		this.provider.commitComponent( this, content );
	}
}


</script>

</class>
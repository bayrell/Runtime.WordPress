/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.WordPress.Admin.Api;

use Runtime.ORM.MigrationBuilder;
use Runtime.Web.Annotations.ApiMethod;
use Runtime.Web.BaseApi;
use Runtime.WordPress.WP_Helper;


class MigrationApi extends BaseApi
{
	/**
	 * Returns api name
	 */
	pure string getApiName() => "admin.wordpress.migration";
	
	
	/**
	 * Execute
	 */
	async MigrationBuilder up(bool execute = false)
	{
		/* Get migrations */
		MigrationBuilder builder = new MigrationBuilder();
		builder.execute = execute;
		
		/* Init builder */
		await builder.init();
		
		/* Up migrations */
		await builder.up();
		
		/* Returns builder */
		return builder;
	}
	
	
	/**
	 * Action item
	 */
	@ApiMethod
	async void actionItem()
	{
		MigrationBuilder builder = await this.up();
		this.success({
			"data": {
				"items": builder.getSQL(),
			}
		})
	}
	
	
	/**
	 * Update database
	 */
	@ApiMethod
	async void actionUpdate()
	{
		MigrationBuilder builder = await this.up(true);
		this.success({
			"data": {
				"items": builder.getSQL(),
			}
		})
	}
}
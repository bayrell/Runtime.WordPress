/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.WordPress.Admin.Components;

use Runtime.lib;
use Runtime.BaseStruct;
use Runtime.ORM.Connection;
use Runtime.ORM.Relation;
use Runtime.Widget.Crud.Rules.CrudRule;
use Runtime.Widget.Crud.CrudService;
use Runtime.WordPress.WP_Helper;


struct ImageRule extends CrudRule
{
	string name = "";
	string key = "";
	
	
	/**
	 * Save item
	 */
	async void onSaveBefore(CrudService service)
	{
		if (not service.data.has(this.name)) return;
		
		/* Get image id */
		Dict image = service.data.get(this.name);
		int image_id = image.get("id");
		
		/* Set image id */
		service.data.set(this.key, image_id);
	}
	
	
	/**
	 * Search after
	 */
	void onSearchAfter(CrudService service)
	{
		Collection<Dict> items = service.items;
		Collection images = service.items
			.map(int (Relation item) => item.get(this.key))
			.filter(bool (int id) => id > 0)
		;
		
		/* Load images */
		Connection connection = service.getConnection();
		Dict result = WP_Helper::loadImages(connection, images);
		
		/* Map items */
		for (int i=0; i<service.items.count(); i++)
		{
			Dict item = service.items.get(i);
			int image_id = item.get(this.key);
			item.set(this.name, result.get(image_id));
		}
	}
}

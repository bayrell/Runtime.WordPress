/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.WordPress.Admin.FormData;

use Runtime.Callback;
use Runtime.Web.BaseRoute;
use Runtime.Widget.ButtonModel;
use Runtime.Widget.Label;
use Runtime.Widget.RowButtonsModel;
use Runtime.Widget.TextArea;
use Runtime.Widget.Crud.CrudApiStorage;
use Runtime.Widget.Crud.Table.SaveDialogModel;
use Runtime.Widget.Crud.Table.TableDialogModel;
use Runtime.WordPress.Admin.FormData.FormDataFormModel;


class FormDataTableModel extends TableDialogModel
{
	/**
	 * Create data storage
	 */
	CrudApiStorage createDataStorage() => new CrudApiStorage{
		"layout": this.layout,
		"class_name": "admin.wordpress.forms.data",
		"primary_keys": ["id"],
	};
	
	
	/**
	 * Init widget settings
	 */
	void initWidget()
	{
		/* Create form */
		this.addWidget(classof FormDataFormModel);
		
		parent();
		
		/* Add fields */
		this.addFields([
			{
				"name": "row_number",
			},
			{
				"name": "form_title",
				"label": "Title",
				"component": classof Label,
			},
			{
				"name": "data",
				"label": "Data",
				"component": classof Label,
			},
			{
				"name": "gmtime_add",
				"label": "Date",
				"component": classof Label,
			},
			{
				"name": "row_buttons",
				"model": this.row_buttons,
			}
		]);
		
		/* Dialog width */
		this.getWidget("save_dialog").setWidth("600px");
		
		/* Remove add button */
		this.top_buttons.removeItemByName("add_button");
		
		/* Remove delete button */
		this.row_buttons.removeItemByName("delete_button");
		
		/* Remove save button */
		SaveDialogModel save_dialog = this.getWidget("save_dialog");
		save_dialog.buttons.removeItemByName("confirm_button");
		
		/* Change save dialog button text */
		ButtonModel button = save_dialog.buttons.findItemByName("cancel_button");
		button.content = "Close";
		
		/* Change view button name */
		ButtonModel edit_button = this.row_buttons.findItemByName("edit_button");
		edit_button.content = "View";
		
		/* Set page */
		this.storage.setPage(this.layout.request_query.get("page", 1));
	}
	
	
	/**
	 * Returns item value
	 */
	var getItemValue(Map item, string field_name)
	{
		if (field_name == "data")
		{
			Dict data = item.get("data");
			if (data == null) return "";
			
			Collection items = data
				.transition(
					string (string value, string key)
					{
						return key ~ ": " ~ value;
					}
				)
			;
			
			return items;
		}
		if (field_name == "gmtime_add")
		{
			DateTime gmtime_add = item.get("gmtime_add");
			return gmtime_add ? gmtime_add.toString() : "";
		}
		return parent(item, field_name);
	}
}
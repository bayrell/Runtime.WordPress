/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.WordPress;

use Runtime.lib;
use Runtime.DateTime;
use Runtime.RawString;
use Runtime.ORM.Connection;
use Runtime.ORM.Query;
use Runtime.Web.BaseApp;
use Runtime.Web.RenderContainer;
use Runtime.Web.Response;
use Runtime.Web.RouteInfo;
use Runtime.Web.RouteList;
use Runtime.WordPress.Admin.AdminUI;


class WP_Helper
{
	#ifdef BACKEND then
	
	/**
	 * Returns option by name
	 */
	static string get_option(string name, string value = "")
	{
		#ifcode PHP then
		if (!is_multisite())
		{
			return \get_option($name, $value);
		}
		return \get_blog_option(null, $name, $value);
		#endif
	}
	
	
	/**
	 * Update option by name
	 */
	static string update_option(string name, string value)
	{
		#ifcode PHP then
		if (!is_multisite())
		{
			if (!add_option($name, $value, "", "no"))
			{
				\update_option($name, $value);
			}
		}
		else
		{
			if (!add_blog_option(null, $name, $value, "", "no"))
			{
				\update_blog_option(null, $name, $value);
			}
		}
		#endif
	}
	
	
	/**
	 * Check wp nonce
	 */
	static bool check_wp_nonce(string nonce_action)
	{
		#ifcode PHP then
		
		/* Check nonce */
		$nonce = isset($_REQUEST['nonce']) ? $_REQUEST['nonce'] : false;
		if ($nonce == false)
		{
			return false;
		}
		if (!wp_verify_nonce($nonce, $nonce_action))
		{
			return false;
		}
		return true;
		
		#endif
	}
	
	
	/**
	 * Load images
	 */
	static Dict loadImages(Connection connection, Collection<int> images)
	{
		Dict result = {};
		
		/* Get images metadata */
		Query q = new Query()
			.select()
			.from("postmeta")
			.addRawField("*")
			.where("meta_key", "=", ["_wp_attachment_metadata", "_wp_attached_file"])
			.where("post_id", "=", images)
		;
		Dict images_metadata = await connection.fetchAll(q);
		
		/* Get post */
		Query q = new Query()
			.select()
			.from("posts")
			.addRawField("*")
			.where("ID", "=", images)
		;
		Dict posts = await connection.fetchAll(q);
		
		/* Upload dir */
		string upload_url = "/wp-content/uploads";
		
		/* Map items */
		for (int i=0; i<images.count(); i++)
		{
			int image_id = images.get(i);
			Dict image = null;
			
			/* Get post */
			string post_time = "";
			Dict post = posts.findItem(lib::equalAttr("ID", image_id));
			if (post)
			{
				DateTime d = DateTime::fromString(post["post_modified_gmt"]);
				post_time = d.timestamp();
			}
			
			/* Load metadata */
			Dict obj_file = images_metadata.findItem(
				bool (Dict item) use (image_id) =>
					item["meta_key"] == "_wp_attached_file" and
					item["post_id"] == image_id
			);
			Dict obj_metadata = images_metadata.findItem(
				bool (Dict item) use (image_id) =>
					item["meta_key"] == "_wp_attachment_metadata" and
					item["post_id"] == image_id
			);
			if (not(obj_file and obj_metadata)) continue;
			
			obj_metadata = obj_metadata.get("meta_value");
			obj_file = obj_file.get("meta_value");
			
			string image_url_after = "?_=" ~ post_time;
			
			#ifcode PHP then
			$obj_metadata = @unserialize($obj_metadata);
			if ($obj_metadata)
			{
				$image_dir_name = dirname($obj_file);
				$image_dir_name = $upload_url . "/" . $image_dir_name;
				$sizes = $obj_metadata["sizes"];
				
				foreach ($sizes as $key => &$size)
				{
					$size = \Runtime\Dict::from([
						"size" => $key,
						"file" => $image_dir_name . "/" .
							basename($size["file"]) . $image_url_after,
						"width" => $size["width"],
						"height" => $size["height"],
						"mime_type" => $size["mime-type"],
					]);
				}
				
				$sizes = \Runtime\Dict::from($sizes);
				$image = \Runtime\Dict::from([
					"id" => $image_id,
					"width" => $obj_metadata["width"],
					"height" => $obj_metadata["height"],
					"file" => $image_dir_name . "/" .
						basename($obj_metadata["file"]) . $image_url_after,
					"sizes" => $sizes,
				]);
			}
			#endif
			
			if (not image) continue;
			result.set(image_id, image);
		}
		
		return result;
	}
	
	
	/**
	 * Apply backend function
	 */
	static fn apply(string name)
	{
		#ifcode PHP then
		
		$args = func_get_args();
		array_shift($args);
		
		return call_user_func_array($name, $args);
		
		#endif
	}
	
	
	/**
	 * Apply backend function
	 */
	static fn wp_apply(string name)
	{
		#ifcode PHP then
		
		ob_start();
		$args = func_get_args();
		array_shift($args);
		
		call_user_func_array($name, $args);
		$content = ob_get_contents();
		ob_end_clean();
		
		return $content;
		
		#endif
	}
	
	
	/**
	 * Call wp admin route
	 */
	async static string wp_admin_route(string route_name, fn route_before = null)
	{
		string content = "";
		
		/* Create render container */
		BaseApp app = @.getApp();
		RenderContainer container = app.createRenderContainer();
		
		/* Create request */
		container.request = app.createRequest();
		
		/* Setup route */
		RouteList routes = @.provider(classof RouteList);
		RouteInfo route = routes.routes_list.findItem(lib::equalAttr("name", route_name));
		container.route = route;
		
		/* Create layout */
		string layout_name = container.getLayoutName();
		await container.createLayout(layout_name);
		
		/* Call route before */
		if (route_before)
		{
			await rtl::apply(route_before, [container]);
		}
		
		/* Resolve route */
		await container.resolveRoute();
		
		/* Return container */
		return container;
	}
	
	
	/**
	 * Render
	 */
	async static string wp_render(RenderContainer container)
	{
		string content = "";
		
		if (container.response instanceof Response)
		{
			content = container.response.getContent(false);
		}
		else
		{
			content = "<p>404 Response not found</p>";
		}
		
		return content;
	}
	
	
	/**
	 * Render page
	 */
	async static void wp_render_page(string route_name, fn route_before = null)
	{
		RenderContainer container = static::wp_admin_route(route_name, route_before);
		string content = static::wp_render(container);
		
		#ifcode PHP then
		do_action("baylang_admin_render_page");
		echo $content;
		#endif
	}
	
	
	#endif
}
/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.WordPress.Theme.WidgetSettings;

use Runtime.lib;
use Runtime.BaseObject;
use Runtime.Web.ApiResult;
use Runtime.Web.BaseModel;
use Runtime.Web.RenderContainer;
use BayLang.Constructor.Frontend.Editor.Parameters.Parameter;
use BayLang.Constructor.Frontend.Editor.Parameters.ParameterComponent;
use BayLang.Constructor.Frontend.Editor.Parameters.ParameterDictModel;
use BayLang.Constructor.Frontend.Editor.Parameters.ParameterFactoryModel;
use BayLang.Constructor.Frontend.Editor.Parameters.ParameterModel;
use BayLang.Constructor.WidgetPage.ParameterFactory;
use BayLang.Constructor.WidgetPage.WidgetSettingsInterface;


class GalleryModelSettings extends BaseObject implements WidgetSettingsInterface
{
	Collection api_names = null;
	Collection image_sizes = null;
	
	
	/**
	 * Returns widget name
	 */
	string getWidgetName() => "";
	
	
	/**
	 * Returns alias name
	 */
	string getAliasName() => "WP_GalleryModel";
	
	
	/**
	 * Returns component name
	 */
	string getComponentName() => "";
	
	
	/**
	 * Returns model name
	 */
	string getModelName() => "Runtime.WordPress.Theme.Components.Gallery.GalleryModel";
	
	
	/**
	 * Returns selector name
	 */
	string getSelectorName() => "gallery";
	
	
	/**
	 * Returns group name
	 */
	string getGroupName() => "widget";
	
	
	/**
	 * Returns true if model
	 */
	bool isModel() => true;
	
	
	/**
	 * Returns true if is widget settings
	 */
	bool checkWidget(var widget)
	{
		if (not widget.isComponent()) return false;
		if (widget.model_class_name != this.getModelName()) return false;
		return true;
	}
	
	
	/**
	 * Can insert widget
	 */
	bool canInsert(WidgetSettingsInterface widget)
	{
		return false;
	}
	
	
	/**
	 * On change
	 */
	bool onChange(BaseModel model, ParameterModel param)
	{
		/* Change api name */
		if (param.name == "api_name")
		{
			model.api_name = param.value;
			model.loadItems();
			return true;
		}
		return false;
	}
	
	
	/**
	 * Load form name options
	 */
	async void loadOptions(var runtime, var widget)
	{
		if (not this.api_names)
		{
			Dict data = ParameterFactory::copy(runtime, {
				"api_name": "admin.wordpress.gallery.search",
				"method_name": "actionSearch",
				"data": {
					"limit": "1000",
				},
			});
			ApiResult result = await widget.page_model.layout.callApi(data);
			if (result.isSuccess())
			{
				Dict result_data = ParameterFactory::restore(runtime, result.data);
				this.api_names = result_data.get("items").map(Dict (Dict item) => {
					"key": item.get("api_name"),
					"value": item.get("api_name"),
				});
			}
			else
			{
				this.api_names = [];
			}
		}
		if (not this.image_sizes)
		{
			Dict data = ParameterFactory::copy(runtime, {
				"api_name": "admin.wordpress.gallery.search",
				"method_name": "actionImageSizes"
			});
			ApiResult result = await widget.page_model.layout.callApi(data);
			if (result.isSuccess())
			{
				Dict result_data = ParameterFactory::restore(runtime, result.data);
				this.image_sizes = result_data.get("items").map(Dict (string name) => {
					"key": name,
					"value": name,
				});
			}
			else
			{
				this.image_sizes = [];
			}
		}
	}
	
	
	/**
	 * Setup widget
	 */
	async void setup(var runtime, var widget)
	{
		/* Load options */
		await this.loadOptions(runtime, widget);
		
		/* Add api_names to widget */
		if (this.api_names)
		{
			ParameterModel parameter = widget.params.findItem(
				bool (Parameter param) => param.name == "api_name"
			);
			if (parameter)
			{
				Collection options = ParameterFactory::copy(runtime, this.api_names);
				parameter.props.set("options", options);
			}
		}
		
		/* Setup image sizes */
		if (this.image_sizes)
		{
			Collection image_sizes = ParameterFactory::copy(runtime, this.image_sizes);
			
			/* Set big_size */
			ParameterModel parameter = widget.params.findItem(
				bool (Parameter param) => param.name == "big_size"
			);
			if (parameter)
			{
				parameter.props.set("options", image_sizes);
			}
			
			/* Set small_size */
			ParameterModel parameter = widget.params.findItem(
				bool (Parameter param) => param.name == "small_size"
			);
			if (parameter)
			{
				parameter.props.set("options", image_sizes);
			}
		}
	}
	
	
	/**
	 * Returns params
	 */
	Collection<ParameterFactory> getParams() =>
	[
		new ParameterFactory
		(
			classof ParameterModel,
			{
				"name": "api_name",
				"label": "Api name",
				"component": "Runtime.Widget.Select",
				"default": "",
				"props": {
					"options": [
					],
				}
			}
		),
		 new ParameterFactory
		(
			classof ParameterModel,
			{
				"name": "dialog_image_contains",
				"label": "Dialog image contains",
				"component": "Runtime.Widget.Select",
				"default": "",
				"props": {
					"options": [
						{"key": "false", "value": "No"},
						{"key": "true", "value": "Yes"},
					],
				}
			}
		),
		new ParameterFactory
		(
			classof ParameterModel,
			{
				"name": "small_size",
				"label": "Small image",
				"component": "Runtime.Widget.Select",
				"default": "",
				"props": {
					"options": [
					],
				}
			}
		),
		new ParameterFactory
		(
			classof ParameterModel,
			{
				"name": "big_size",
				"label": "Big image",
				"component": "Runtime.Widget.Select",
				"default": "",
				"props": {
					"options": [
					],
				}
			}
		),
	];
	
	
	/**
	 * Returns default template
	 */
	Dict<fn> getDefaultTemplate() =>
	{
		"default": Dict () =>
		{
			"modules":
			[
				"Runtime.Entity.Factory",
			],
			"model": rs::join("\n", [
				"this.form = this.addWidget(classof WP_GalleryModel, {",
				"\t'widget_name': 'gallery',",
				"\t'apiname': 'default',",
				"});",
			])
		}
	};
}
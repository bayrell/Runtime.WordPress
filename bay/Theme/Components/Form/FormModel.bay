/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.WordPress.Theme.Components.Form;

use Runtime.Serializer;
use Runtime.Web.ApiResult;
use Runtime.Widget.Form.FormSubmitModel;
use Runtime.Widget.Form.FormSubmitStorage;


class FormModel extends FormSubmitModel
{
	string form_name = "";
	string form_title = "";
	string metrika_event = "";
	string metrika_form_id = "";
	string redirect_url = "";
	
	
	/**
	 * Process frontend data
	 */
	void serialize(Serializer serializer, Map data)
	{
		serializer.process(this, "fields", data);
		parent(serializer, data);
	}
	
	
	/**
	 * Init widget params
	 */
	void initParams(Dict params)
	{
		parent(params);
		
		if (params == null) return;
		if (params.has("form_name")) this.form_name = params.get("form_name");
		if (params.has("form_title")) this.form_title = params.get("form_title");
		if (params.has("metrika_event")) this.metrika_event = params.get("metrika_event");
		if (params.has("metrika_form_id")) this.metrika_form_id = params.get("metrika_form_id");
		if (params.has("redirect_url")) this.redirect_url = params.get("redirect_url");
	}
	
	
	/**
	 * Init widget settings
	 */
	void initWidget(Dict params)
	{
		parent(params);
		
		/* Setup storage */
		if (this.storage == null)
		{
			this.storage = new FormSubmitStorage{
				"api_name": "runtime.wordpress.form.submit",
			};
			this.storage.setForm(this);
		}
	}
	
	
	/**
	 * Merge post data
	 */
	Dict mergePostData(Dict post_data, string action)
	{
		post_data = parent(post_data, action);
		post_data.set("form_name", this.form_name);
		post_data.set("form_title", this.form_title);
		post_data.set("metrika_form_id", this.metrika_form_id);
		return post_data;
	}
	
	
	/**
	 * Returns field component
	 */
	string getFieldComponent(string field_type)
	{
		if (field_type == "textarea")
		{
			return "Runtime.Widget.TextArea";
		}
		return "Runtime.Widget.Input";
	}
	
	
	/**
	 * Load form
	 */
	async void loadForm()
	{
		ApiResult result = await this.layout.callApi({
			"api_name": "runtime.wordpress.form.submit",
			"method_name": "actionSettings",
			"data": {
				"form_name": this.form_name,
			},
		});
		if (result.isSuccess())
		{
			/* Clear fields */
			this.fields = [];
			
			/* Add new fields */
			Collection fields = result.data.get("settings").get("fields");
			if (fields)
			{
				for (int i=0; i<fields.count(); i++)
				{
					Dict field = fields.get(i);
					this.addField({
						"name": field.get("name"),
						"label": field.get("title"),
						"component": this.getFieldComponent(field.get("type")),
						"props": {
							"placeholder": field.get("placeholder"),
						},
					});
				}
			}
		}
	}
	
	
	/**
	 * Submit form
	 */
	async ApiResult submit()
	{
		ApiResult res = await parent();
		
		/* Send event */
		await @.callHook("runtime.wordpress::form_submit", {
			"form": this,
			"res": res,
		});
		
		/* Redirect */
		if (res.isSuccess() and this.redirect_url != "")
		{
			document.location = this.redirect_url;
		}
		
		return res;
	}
}